AWSTemplateFormatVersion: 2010-09-09
Resources:
  vpc-kubernetes:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.240.0.0/24
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way

  subnet-kubernetes:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.240.0.0/24
      AvailabilityZone: us-west-2b
      VpcId: !Ref vpc-kubernetes
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way

  igw-kubernetes:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way

  dhcpoptions-kubernetes:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way
      DomainName: us-west-2.compute.internal
      DomainNameServers:
        - AmazonProvidedDNS

  networkacl-kubernetes:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref vpc-kubernetes

  rtb03991342d16a5382a:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpc-kubernetes

  rtb0be5f5ee8d3d442de:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref vpc-kubernetes
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way

  controller-1-instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-51537029
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: K8S
          Value: controller
        - Key: Name
          Value: controller-1
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref subnet-kubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.11
              Primary: 'true'
          GroupSet:
            - !Ref sg-kubernetes

  worker-2-instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-51537029
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: worker-2
        - Key: K8S
          Value: worker
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref subnet-kubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.22
              Primary: 'true'
          GroupSet:
            - !Ref sg-kubernetes

  controller-2-instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-51537029
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: K8S
          Value: controller
        - Key: Name
          Value: controller-2
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref subnet-kubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.12
              Primary: 'true'
          GroupSet:
            - !Ref sg-kubernetes

  worker-0-instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-51537029
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: worker-0
        - Key: K8S
          Value: worker
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref subnet-kubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.20
              Primary: 'true'
          GroupSet:
            - !Ref sg-kubernetes

  controller-0-instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-51537029
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: K8S
          Value: controller
        - Key: Name
          Value: controller-0
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref subnet-kubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.10
              Primary: 'true'
          GroupSet:
            - !Ref sg-kubernetes

  worker-1-instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: ami-51537029
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: worker-1
        - Key: K8S
          Value: worker
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref subnet-kubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.21
              Primary: 'true'
          GroupSet:
            - !Ref sg-kubernetes

  sg-kubernetes:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Kubernetes security group
      VpcId: !Ref vpc-kubernetes
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way
  acl1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref networkacl-kubernetes
  acl2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref networkacl-kubernetes
  subnetacl1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref networkacl-kubernetes
      SubnetId: !Ref subnet-kubernetes
  gateway-attach-kubernetes:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref vpc-kubernetes
      InternetGatewayId: !Ref igw-kubernetes
  subnetroute2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      SubnetId: !Ref subnet-kubernetes
  route1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.200.0.0/24
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      InstanceId: !Ref worker-0-instance
  route2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.200.1.0/24
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      InstanceId: !Ref worker-1-instance
  route3:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.200.2.0/24
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      InstanceId: !Ref worker-2-instance
  route4:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      GatewayId: !Ref igw-kubernetes
    DependsOn: gateway-attach-kubernetes
  vpc-dhcpoptions-association-kubernetes:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref vpc-kubernetes
      DhcpOptionsId: !Ref dhcpoptions-kubernetes
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sg-kubernetes
      IpProtocol: tcp
      FromPort: '6443'
      ToPort: '6443'
      CidrIp: 24.9.31.138/32
  ingress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sg-kubernetes
      IpProtocol: '-1'
      CidrIp: 10.240.0.0/24
  ingress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sg-kubernetes
      IpProtocol: '-1'
      CidrIp: 10.200.0.0/16
  ingress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sg-kubernetes
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 24.9.31.138/32
  ingress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sg-kubernetes
      IpProtocol: tcp
      FromPort: '30754'
      ToPort: '30754'
      CidrIp: 24.9.31.138/32
  ingress6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sg-kubernetes
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 0.0.0.0/0
  egress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref sg-kubernetes
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
#manually created BJP
  elbv2-kubernetes:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: kubernetes
      Subnets: !Ref subnet-kubernetes
      Scheme: internet-facing
      Type: network
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way
  elbv2-targetgroup-kubernetes:
    Type: ' AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: kubernetes
      Port: 6443
      Protocol: TCP
      VpcId: !Ref vpc-kubernetes
      TargetType: ip
      Targets:
        - Id: !Ref controller-0-instance
        - Id: !Ref controller-2-instance
        - Id: !Ref controller-1-instance
  elbv2-listener-kubernetes:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref elbv2-kubernetes
      Protocol: TCP
      Port: 6443
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref elbv2-targetgroup-kubernetes
Description: K8s cluster stack from existing infra - created kubernetes-the-hard-way