AWSTemplateFormatVersion: 2010-09-09
Description: K8s cluster stack from existing infra - created kubernetes-the-hard-way
# Note defaults for most items are for region us-west-2

Mappings: 
  RegionAMIMap: 
    us-west-1:
      "Ubuntu1604": ""
      "Ubuntu1804": ""
      "AmazonLinux2": ""
    us-west-2:
      "Ubuntu1604": "ami-0e32ec5bc225539f5"
      "Ubuntu1804": "ami-0bbe6b35405ecebdb"
      "AmazonLinux2": "ami-6cd6f714"

Parameters:
  ControllerName: 
    Type: String
    Default: controller
    Description: Enter a name for the k8s controller nodes (will create 3 nodes)
  ControllerAMI: 
    Type: String
    Default: ""
    Description: Enter an AMI to use for the controller instances 

  WorkerName: 
    Type: String
    Default: worker
    Description: Enter a name for the k8s worker nodes (will create 3 nodes)
  WorkerAMI: 
    Type: String
    Default: ""
    Description: Enter an AMI to use for the worker instances

  VPCCIDR:
    Type: String
    Default: 10.240.0.0/24
    Description: Enter a CIDR for the K8s custom VPC
  SubnetCIDR:
    Type: String
    Default: 10.240.0.0/24
    Description: Enter a CIDR for the K8s custom subnet in the VPC
  SubnetAZ:
    Type: String
    Default: ""
    Description: Enter a AWS availability zone for the K8s custom subnet

Conditions:
  UseDefaultControllerAMI: !Equals [!Ref ControllerAMI, ""]
  UseDefaultWorkerAMI: !Equals [!Ref WorkerAMI, ""]
  UseDefaultSubnetAZ: !Equals [!Ref SubnetAZ, ""]

#Transforms:

Resources:
  VPCKubernetes:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way

  SubnetKubernetes:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref SubnetCIDR
      AvailabilityZone: !If [UseDefaultSubnetAZ, !Select [0, !GetAZs ""], !Ref SubnetAZ]
      VpcId: !Ref VPCKubernetes
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way

  IGWKubernetes:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way

  DHCPOptionsKubernetes:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way
      DomainName: us-west-2.compute.internal
      DomainNameServers:
        - AmazonProvidedDNS

  NetworkACLSKubernetes:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPCKubernetes

  rtb03991342d16a5382a:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCKubernetes

  rtb0be5f5ee8d3d442de:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCKubernetes
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way

  ControllerOneInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !If [UseDefaultControllerAMI, !FindInMap [RegionAMIMap, !Ref "AWS::Region", Ubuntu1604], !Ref ControllerAMI]
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: K8S
          Value: !Ref ControllerName
        - Key: Name
          Value: !Join [ "-", [ !Ref ControllerName, 1] ]
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref SubnetKubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.11
              Primary: 'true'
          GroupSet:
            - !Ref SGKubernetes

  WorkerTwoInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !If [UseDefaultWorkerAMI, !FindInMap [RegionAMIMap, !Ref "AWS::Region", Ubuntu1604], !Ref WorkerAMI]
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref WorkerName, 2] ]
        - Key: K8S
          Value: !Ref WorkerName
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref SubnetKubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.22
              Primary: 'true'
          GroupSet:
            - !Ref SGKubernetes

  ControllerTwoInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !If [UseDefaultControllerAMI, !FindInMap [RegionAMIMap, !Ref "AWS::Region", Ubuntu1604], !Ref ControllerAMI]
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: K8S
          Value: !Ref ControllerName
        - Key: Name
          Value: !Join [ "-", [ !Ref ControllerName, 2] ]
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref SubnetKubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.12
              Primary: 'true'
          GroupSet:
            - !Ref SGKubernetes

  WorkerZeroInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !If [UseDefaultWorkerAMI, !FindInMap [RegionAMIMap, !Ref "AWS::Region", Ubuntu1604], !Ref WorkerAMI]
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref WorkerName, 0] ]
        - Key: K8S
          Value: !Ref WorkerName
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref SubnetKubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.20
              Primary: 'true'
          GroupSet:
            - !Ref SGKubernetes

  ControllerZeroInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !If [UseDefaultControllerAMI, !FindInMap [RegionAMIMap, !Ref "AWS::Region", Ubuntu1604], !Ref ControllerAMI]
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: K8S
          Value: !Ref ControllerName
        - Key: Name
          Value: !Join [ "-", [ !Ref ControllerName, 0] ]
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref SubnetKubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.10
              Primary: 'true'
          GroupSet:
            - !Ref SGKubernetes

  WorkerOneInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !If [UseDefaultWorkerAMI, !FindInMap [RegionAMIMap, !Ref "AWS::Region", Ubuntu1604], !Ref WorkerAMI]
      InstanceType: t2.micro
      KeyName: kubernetes
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref WorkerName, 1] ]
        - Key: K8S
          Value: !Ref WorkerName
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          DeviceIndex: 0
          SubnetId: !Ref SubnetKubernetes
          PrivateIpAddresses:
            - PrivateIpAddress: 10.240.0.21
              Primary: 'true'
          GroupSet:
            - !Ref SGKubernetes

  SGKubernetes:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Kubernetes security group
      VpcId: !Ref VPCKubernetes
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way
  acl1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref NetworkACLSKubernetes
  acl2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref NetworkACLSKubernetes
  subnetacl1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkACLSKubernetes
      SubnetId: !Ref SubnetKubernetes
  GatewayAttachKubernetes:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPCKubernetes
      InternetGatewayId: !Ref IGWKubernetes
  subnetroute2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      SubnetId: !Ref SubnetKubernetes
  route1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.200.0.0/24
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      InstanceId: !Ref WorkerZeroInstance
  route2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.200.1.0/24
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      InstanceId: !Ref WorkerOneInstance
  route3:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 10.200.2.0/24
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      InstanceId: !Ref WorkerTwoInstance
  route4:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rtb0be5f5ee8d3d442de
      GatewayId: !Ref IGWKubernetes
    DependsOn: GatewayAttachKubernetes
  VPCDHCPOptionsAssocKubernetes:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref VPCKubernetes
      DhcpOptionsId: !Ref DHCPOptionsKubernetes
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGKubernetes
      IpProtocol: tcp
      FromPort: '6443'
      ToPort: '6443'
      CidrIp: 24.9.31.138/32
  ingress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGKubernetes
      IpProtocol: '-1'
      CidrIp: 10.240.0.0/24
  ingress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGKubernetes
      IpProtocol: '-1'
      CidrIp: 10.200.0.0/16
  ingress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGKubernetes
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 24.9.31.138/32
  ingress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGKubernetes
      IpProtocol: tcp
      FromPort: '30754'
      ToPort: '30754'
      CidrIp: 24.9.31.138/32
  ingress6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SGKubernetes
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 0.0.0.0/0
  egress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref SGKubernetes
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0

  ELBV2Kubernetes:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: kubernetes
      Subnets: !Ref SubnetKubernetes
      Scheme: internet-facing
      Type: network
      Tags:
        - Key: Name
          Value: kubernetes-the-hard-way
  ELBV2TargetGroupKubernetes:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: kubernetes
      Port: 6443
      Protocol: TCP
      VpcId: !Ref VPCKubernetes
      TargetType: ip
      Targets:
        - Id: !Ref ControllerZeroInstance
        - Id: !Ref ControllerTwoInstance
        - Id: !Ref ControllerOneInstance
  ELBV2ListenerKubernetes:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ELBV2Kubernetes
      Protocol: TCP
      Port: 6443
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBV2TargetGroupKubernetes

#Outputs: